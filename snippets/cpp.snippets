# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if(FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while(size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Head Tail
snippet ht
	/// ${1:`expand('%')`}
	///
	/// author: kisow.github.io@navercorp.com

	${2}

	// vim:sw=2:ts=2:expandtab:smarttab:autoindent:fdm=marker
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} // $1
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} 
	{
	public:
		$1(${2:arguments});
		virtual ~$1();

	private:
		${3:/* data */}
	};
# struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} 
	{
		$1(${2:arguments});
		virtual ~$1();

		${3:/* data */}
	};
# member reference
snippet mr
	${1:type} ${2:/* name */}_;
	const $1& get${3:FunName}() const { return $2_; } 
	void set$3(const $1& value) { $2_ = value; } 
	$4
# member
snippet m
	${1:type} ${2:/* name */}_;
	${1} get${3:FunName}() { return $2_; } 
	void set$3($1 value) { $2_ = value; } 
	$4
# fori
snippet fori
	for(int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Try
snippet try
	try {
		${2:/* code */}
	} catch(${1:ir::Exception& ex}) {
		${3:/* code */}
	}
# Tryc
snippet tryc
	try {
		${2:/* code */}
	} catch(${1:ir::Exception& ex}) {
		${3:/* code */}
	} catch(...) {
		${4:/* code */}
	}
# using
snippet using
	using namespace ${1:std};
	${2}
